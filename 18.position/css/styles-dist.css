/*
    La propiedad position nos permite posicionar los elementos. Hay algunos conceptos que debéis conocer para entender position.
    
    Flujo de renderizado -> Por norma general los elementos se dibujan de izquierda a derecha y de arriba abajo. El punto 0,0 de los elementos, por norma general, es la esquina superior izquierda.

    Espacio reservado -> Es el espacio que tiene un elemento asignado en el navegador.

    Elemento posicionado -> Esto significa que el elemento tiene la propiedad position con un valor distinto de "static", que es el valor que tiene esta propiedad por defecto.

    Stackin context -> Contexto de apilamiento. Es el orden en el que se apilarán las cajas que se superponen, dentro del mismo contenedor.

    Al posicionar un elemento se habilitan 5 propiedades que podemos utilizar para mover los elementos en los 3 ejes.

    top -> El elemento se moverá desde la parte superior la distancia que le hayamos indicado.

    right -> El elemento se moverá desde la parte derecha la distancia que le hayamos indicado.

    bottom -> El elemento se moverá desde la parte inferior la distancia que le hayamos indicado.

    left -> El elemento se moverá desde la parte izquierda la distancia que le hayamos indicado.

    z-index -> Nos permite mover el elemento en el contexto de apilamiento (eje z)

    NOTA: Si a un elemento le declaramos la propiedad top y/o left, las propiedades bottom y/o right no funcionarán. 

    Los posibles valores que le podemos dar a position son.
    Static -> Es el valor que tiene por defecto un elemento, con este valor el elemento NO ESTÁ POSICIONADO y por lo cual no podremos moverlo

    Relative -> El elemento mantendrá su posición y medidas en el flujo de renderizado y mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en el html como punto de referencia.

    Absolute -> El elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento posicionado contenedor como referencia. Si no tiene ninguno, usará el elemento html de referencia.

    Fixed -> El elemento perderá sus medidas y su espacio reservado.
    Si lo movemos usará el elemento html de referencia, y además se quedará fijo en esa posición aunque hagamos scroll.

    Sticky -> Es una mezcla de position relative y "fixed".
    Con este tipo de posicionamiento los valores top, left, bottom y right no sirven para mover el elemento, si no para indicarle en qué punto pasará a tener un comportamiento de posicionamiento similar a fixed, hasta llegar a ese punto se comportará como si no tuviera posicionamiento, aunque sí contará como posicionado si necesitáramos colocar otro elemento respecto a él (absolute)

    z-index: Es la propiedad que nos permite ordenar los elementos superpuestos para controlar cual se coloca por delante y cual por detrás.
*/

* {
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
}

body {
    margin: 0;
    background-color: #333;
    color: #356;
    /*padding-top: 85px;*/
    /* padding-top: 70px; */
}

/* 
Position relative
.box{
    width: 100px;
    height: 100px;
}

.box-1{
    background-color: burlywood;
    position: relative;
    left: 100px;
}

.box-2{
    background-color: coral;
    position: relative;
    top: 50px;
} */


/* .box{
    width: 100px;
    height: 100px;
    text-align: center;
}

.container{
    width: 200px;
    height: 200px;
    /* background-color: rgba(11, 144, 226, 0.863);
    position: relative;
    /* margin-left: 200px; 
} */

/*
    Position absolute

.box-1{
    background-color: darkgoldenrod;
    position: absolute;
    /*  left: 100px;
    /* top: 100px;
    bottom: 100px; 
    right: 0;
    bottom: 0;
}

.box-2{
    background-color: darksalmon;
    position: absolute;
    /* bottom: 0;
    right: 0; */
    /* left: 100px;
    bottom: 100px; 
    right: 0;
    bottom: 0;
}

.link{
    position: absolute;
    background-color: lime;
    width: 200px;
    top: 50px;
} */


/* 
    Position fixed
.header{
    background-color: cadetblue;
    /* height: 100px; 
    text-align: center;
    padding: 25px 0;
    color: coral;
    position: fixed;
    top: 0;
    width: 100%;
}

.link{
    position: fixed;
    width: 30%;
    background-color: cornsilk;
} */

/* 
    Position sticky
img{
    width: 100%;
    display:block
}

.header{
    background-color: cadetblue; 
    text-align: center;
    color: coral;
    height: 100px;
    /* position: sticky;
    left: 10px;
    top: 0;
}
 
.article-title{
    position: sticky;
    top: 0;
    background-color: #333;
}*/

/* .text{
    position: sticky;
    top: 10px;
} */

/* .menu{
    position: sticky;
    top: 0;
} */


/*z-index*/

.container{
    width: 200px;
    height: 200px;
    background-color: aquamarine;
    position: relative;
    /*El elemento padre jamas se va a poner encima del hijo
    z-index: auto;*/
}

.box{
    width: 100px;
    height: 100px;
    text-align: center;
}

.box-1{
    background-color: burlywood;
    position: relative;
    left: 150px;
    /*Forma de que el hijo se coloque detras del padre*/
    z-index: -1;
   /*  border-radius: 50px; */
}

.box-1-2{
    background-color: cornflowerblue;
    position: relative;
    left: 150px;
    top: -25px;
    z-index: -2;
}

.box-2{
    background-color: coral;
    position: relative;
    top: 50px;
    z-index: 20;
}

.box-3{
    background-color: brown;
    position: relative;
    z-index: 30;
    /* border-radius: 70px;
    overflow: hidden; */
}